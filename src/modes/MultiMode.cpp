#include <cassert>
#include "MultiMode.hpp"

#include "../utils/utils.hpp"

#include "../arguments/measureSelector.hpp"
#include "../arguments/methodSelector.hpp"
#include "../arguments/graphLoader.hpp"

#include "../report.hpp"
#include <iostream>
#include <vector>
void MultiMode::run(ArgumentParser& args) {
    createFolders();
    std::vector<Graph> graphs;
    initGraphs(graphs, args);
    uint maxIndex = 0;
    Graph SN;
    for(uint i = 1;i<graphs.size();i++)
    {
        if (graphs[maxIndex].getNumNodes()<graphs[i].getNumNodes())
        {
            maxIndex = i;
        }
    }
    SN = graphs[maxIndex];
    graphs.erase(graphs.begin()+maxIndex);
    MeasureCombination M;
	initMeasures(M, graphs, SN, args);
	SANA* sana;
    cerr<<"check at MultiMode::run after SANA* sana; @ MultiMode.hpp "<<endl;
	sana = initSANA(graphs, SN, args, M);
	MultiAlignment A = sana->RunAndPrintTime();
	cerr<<"check at MultiMode::run after MultiAlignment A = sana->RunAndPrintTime @ MultiMode.hpp "<<endl;
	assert(A.isCorrectlyDefined(graphs,SN) and "Resulting alignment is not correctly defined");
    cerr<<"check at MultiMode::run before saveReport(graphs,@ MultiMode.hpp "<<endl;
	saveReport(graphs, SN, A, M, sana, "");
    delete sana;
    /*for(uint i = 0;i<graphs.size();i++)
    {
        if (i != maxIndex)
        {
            MeasureCombination M;
            initMeasures(M, graphs[i], graphs[maxIndex], args);
            Method* method;
            method = initMethod(graphs[i], graphs[maxIndex], args, M);
            Alignment A = method->runAndPrintTime();

            A.printDefinitionErrors(graphs[i], graphs[maxIndex]);
            assert(A.isCorrectlyDefined(graphs[i], graphs[maxIndex]) and "Resulting alignment is not correctly defined");

            //saveReport(graphs[i], graphs[maxIndex], A, M, method, "shadow_"+graphs[i].getName()+"_"+graphs[maxIndex].getName());
            saveReport(graphs[i], graphs[maxIndex], A, M, method, "");
            delete method;
        }
    }*/

}

string MultiMode::getName(void) {
    return "MultiMode";
}


void MultiMode::createFolders(void) {
  createFolder("matrices");
  createFolder("matrices/autogenerated");
  createFolder("tmp");
  createFolder("alignments");
  createFolder("go");
  createFolder("go/autogenerated");
}
